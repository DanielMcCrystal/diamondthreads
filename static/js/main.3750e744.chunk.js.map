{"version":3,"sources":["diamond-threads/MessageComponent.tsx","diamond-threads/RedditManager.ts","diamond-threads/ThreadDataManager.ts","diamond-threads/Thread.tsx","ThreadClient.tsx","App.js","serviceWorker.js","index.js"],"names":["MessageComponent","props","messageData","myMessageRef","myMessageBoxContainerRef","lastCommentRef","state","myMessageBoxContainerHeight","collapseOffset","collapseOffsetFromChild","dataManager","getMessageData","messageId","React","createRef","this","current","newCollapseHeight","offsetHeight","parentCollapseOffset","parentMessage","setCollapseOffset","setState","collapseHeight","replyIds","replies","sliceEnd","length","slice","map","id","key","backgroundColor","className","style","display","width","minWidth","ref","depth","zIndex","marginBottom","paddingRight","height","position","top","getMaxDepth","padding","author","text","getReplyComponents","getLastReplyComponent","Component","snoowrap","require","RedditManager","sr","clientId","clientSecret","refreshToken","post","comments","forEach","comment","postRootComment","rootId","addRootMessage","name","body","reply","postReply","replyToId","parentId","addReply","submissionId","callback","getSubmission","fetch","then","populateComments","catch","reason","console","log","ThreadDataManager","currentMessageId","rootMessages","Set","allMessages","maxDepth","ready","Array","from","toString","undefined","replyTo","message","createNewMessage","add","push","Thread","redditManager","scrollRef","fetchPost","markReady","forceUpdate","getRootMessageIds","flexDirection","isReady","getMessageComponents","ThreadClient","lastSubmissionId","enteredURL","commentsIndex","indexOf","substr","alignItems","alignSelf","justifyContent","TextInput","placeholder","onChange","e","target","value","marginRight","Button","appearance","onClick","submitURL","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","error"],"mappings":"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","file":"static/js/main.3750e744.chunk.js","sourcesContent":["import './Message.css';\n\nimport {Message, ThreadDataManager} from './ThreadDataManager'\n\nimport React from 'react'\n\ninterface MessageProps {\n\tmessageId: string,\n\tdataManager: ThreadDataManager,\n\toffsetHeight: number,\n\n\tparentMessage?: MessageComponent | null,\n\t//threadConfig: ThreadConfig,\n\n}\n\ninterface MessageState {\n\tmyMessageBoxContainerHeight: number,\n\tcollapseHeight?: number,\n\tcollapseOffset: number,\n}\n\nexport default class MessageComponent extends React.Component<MessageProps, MessageState> {\n\n\tmessageData: Message;\n\n\tmyMessageRef: React.Ref<HTMLDivElement>;\n\tmyMessageBoxContainerRef: React.Ref<HTMLDivElement>;\n\n\tlastCommentRef: React.Ref<MessageComponent>;\n\n\tstate: MessageState = {\n\t\tmyMessageBoxContainerHeight: 0,\n\t\tcollapseOffset: 0,\n\t}\n\n\tcollapseOffsetFromChild: number = 0;\n\tsetCollapseOffset(collapseOffset: number) {\n\t\tthis.collapseOffsetFromChild = collapseOffset;\n\t}\n\n\n\tconstructor(props: MessageProps) {\n\t\tsuper(props);\n\n\t\tthis.messageData = props.dataManager.getMessageData(props.messageId);\n\t\t\n\t\tthis.myMessageRef = React.createRef<HTMLDivElement>();\n\t\tthis.myMessageBoxContainerRef = React.createRef<HTMLDivElement>();\n\n\t\tthis.lastCommentRef = React.createRef<MessageComponent>();\n\t}\n\n\tcomponentDidMount() {\n\n\t\tlet myMessageRef = this.myMessageRef as any;\n\t\tlet myMessageBoxContainerRef = this.myMessageBoxContainerRef as any;\n\n\t\tif (myMessageRef.current && myMessageBoxContainerRef.current) {\n\t\t\tlet currentCollapseHeight = myMessageRef.current.offsetHeight;\n\t\t\tlet newCollapseHeight = currentCollapseHeight + this.collapseOffsetFromChild;\n\n\t\t\tlet parentCollapseOffset = newCollapseHeight - myMessageBoxContainerRef.current.offsetHeight;\n\n\t\t\tif (this.props.parentMessage) {\n\t\t\t\tthis.props.parentMessage.setCollapseOffset(parentCollapseOffset);\n\t\t\t}\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tcollapseHeight: newCollapseHeight,\n\t\t\t\tcollapseOffset: this.collapseOffsetFromChild,\n\t\t\t\tmyMessageBoxContainerHeight: myMessageBoxContainerRef.current.offsetHeight,\n\t\t\t})\n\t\t}\n\t}\n\n\tgetReplyComponents(): Array<React.ReactNode> {\n\t\tlet replyIds = this.messageData.replies;\n\t\t\n\t\tlet sliceEnd = replyIds.length - 1;\n\n\t\treturn replyIds.slice(0, sliceEnd).map((id) => <MessageComponent \n\t\t\tkey={id} \n\t\t\tmessageId={id} \n\n\t\t\tdataManager={this.props.dataManager}\n\t\t\toffsetHeight={this.props.offsetHeight + this.state.myMessageBoxContainerHeight}\n\t\t/>);\n\t}\n\n\tgetLastReplyComponent(backgroundColor: string): React.ReactNode {\n\t\tlet replyIds = this.messageData.replies;\n\t\tif (replyIds.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet id = replyIds[replyIds.length - 1];\n\t\t\n\t\treturn (\n\t\t\t<div className=\"lastReply\" style={{display: 'flex'}}>\n\t\t\t\t<div style={{width: 50, minWidth: 50, backgroundColor: backgroundColor}}/>\n\t\t\t\t<MessageComponent \n\t\t\t\t\tref={this.lastCommentRef}\n\t\t\t\t\tkey={id} \n\t\t\t\t\tmessageId={id} \n\n\t\t\t\t\tparentMessage={this}\n\n\t\t\t\t\tdataManager={this.props.dataManager}\n\t\t\t\t\toffsetHeight={this.props.offsetHeight + this.state.myMessageBoxContainerHeight}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst backgroundColor = `hsl(0, 0%, ${85 - (10 * (this.messageData.depth % 2))}%)`;\n\t\treturn (\n\t\t\t<div className=\"messageContainer\" style={{zIndex: this.messageData.depth, marginBottom: this.messageData.depth === 1 ? 10 : 0}}>\n\t\t\n\t\t\t\t<div className=\"message\" \n\t\t\t\t\tref={this.myMessageRef}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: backgroundColor, \n\t\t\t\t\t\t\n\t\t\t\t\t\tpaddingRight: 5,\n\t\t\t\t\t\theight: this.state.collapseHeight ? this.state.collapseHeight : 'auto',\n\t\t\t\t\t\tmarginBottom: `${-this.state.collapseOffset}px`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"messageBoxContainer\" \n\t\t\t\t\t\tref={this.myMessageBoxContainerRef} \n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'sticky',\n\t\t\t\t\t\t\ttop: this.props.offsetHeight, \n\t\t\t\t\t\t\tbackgroundColor: backgroundColor,\n\t\t\t\t\t\t\tzIndex: this.props.dataManager.getMaxDepth() * 2 - this.messageData.depth + 1,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div style={{padding: 10,}}>\n\t\t\t\t\t\t\t<div className=\"messageBox\" >\n\t\t\t\t\t\t\t\t<div className=\"commentMetadata\">\n\t\t\t\t\t\t\t\t\t<b>{this.messageData.author}</b>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{this.messageData.text}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t{ this.messageData.replies.length > 0 ?\n\t\t\t\t\t<div className=\"repliesContainer\">\n\t\t\t\t\t\t<div style={{width: 50, minWidth: 50}}>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"replies\">\n\t\t\t\t\t\t\t{this.getReplyComponents()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t: null}\n\t\t\t\t</div>\n\t\t\t\t{this.getLastReplyComponent(backgroundColor)}\n\t\t\t</div>\n\t\t)\n\t}\n}","import Snoowrap from \"snoowrap\";\nimport { ThreadDataManager } from \"./ThreadDataManager\";\n\nconst snoowrap = require('snoowrap');\n\nexport default class RedditManager {\n\n\tsr: Snoowrap;\n\tdataManager: ThreadDataManager;\n\n\tconstructor(dataManager: ThreadDataManager) {\n\t\tthis.sr = new snoowrap({\n\t\t\tclientId: '4hLFsXj1w7VJ5Q',\n\t\t\tclientSecret: 'fcn8ceF26gEvGFJpCTuuAM0MbAE',\n\t\t\trefreshToken: '12080383-eFbYr4gUAfbeeNx_PIDu8CtBGXI',\n\t\t});\n\n\t\tthis.dataManager = dataManager;\n\t}\n\n\tpopulateComments(post: Snoowrap.Submission) {\n\t\tpost.comments.forEach((comment) => {\n\t\t\tthis.postRootComment(comment);\n\t\t})\n\t}\n\n\tpostRootComment(comment: Snoowrap.Comment) {\n\t\tlet rootId = this.dataManager.addRootMessage(comment.author.name, comment.body, comment.id);\n\t\tcomment.replies.forEach((reply) => {\n\t\t\tthis.postReply(reply, rootId);\n\t\t})\n\t}\n\n\tpostReply(comment: Snoowrap.Comment, replyToId: string) {\n\t\tlet parentId = this.dataManager.addReply(comment.author.name, comment.body, replyToId, comment.id);\n\t\t\n\t\tcomment.replies.forEach((reply) => {\n\t\t\tthis.postReply(reply, parentId);\n\t\t})\n\t}\n\n\tasync fetchPost(submissionId: string, callback: () => void) {\n\t\t// submissionId = 'j19mct';\n\t\tthis.sr.getSubmission(submissionId).fetch().then((post) => {\n\t\t\tthis.populateComments(post);\n\t\t\tcallback();\n\t\t}).catch((reason: any) => {\n\t\t\tconsole.log(reason);\n\t\t});\n\n\t}\n}","\nexport interface Message {\n\tid: string,\n\ttext: string,\n\tauthor: string,\n\treplyTo?: string | null,\n\treplies: Array<string>,\n\tdepth: number,\n}\n\ninterface MessageStore {\n\t[id: string]: Message,\n}\n\nexport class ThreadDataManager {\n\tcurrentMessageId: number = 0;\n\n\trootMessages: Set<string> = new Set();\n\tallMessages: MessageStore = {};\n\n\tprivate maxDepth: number = 0;\n\tgetMaxDepth(): number {\n\t\treturn this.maxDepth;\n\t}\n\n\tgetMessageData(id: string): Message {\n\t\treturn this.allMessages[id];\n\t}\n\n\tgetRootMessageIds(): Array<string> {\n\t\treturn Array.from(this.rootMessages);\n\t}\n\n\tcreateNewMessage(author: string, text: string, replyToId?: string | null, id?: string | null): Message {\n\t\tif (!id) {\n\t\t\tid = this.currentMessageId.toString();\n\t\t\tthis.currentMessageId += 1;\n\t\t}\n\t\t\n\n\t\tlet depth = 1;\n\n\t\tif (replyToId !== null && replyToId !== undefined) {\n\t\t\tlet parentMessage = this.getMessageData(replyToId);\n\t\t\tdepth = parentMessage.depth + 1;\n\n\t\t\tif (depth > this.maxDepth) {\n\t\t\t\tthis.maxDepth = depth;\n\t\t\t}\n\t\t}\n\t\t\n\n\t\treturn {\n\t\t\tid: id,\n\t\t\ttext: text,\n\t\t\tauthor: author,\n\t\t\treplyTo: replyToId,\n\t\t\treplies: [],\n\t\t\tdepth: depth,\n\t\t}\n\t}\n\n\n\taddRootMessage(author: string, text: string, id?: string | null): string {\n\t\tlet message = this.createNewMessage(author, text, null, id);\n\n\t\tthis.rootMessages.add(message.id);\n\t\tthis.allMessages[message.id] = message;\n\n\t\treturn message.id;\n\t}\n\n\taddReply(author: string, text: string, replyToId: string, id?: string | null): string {\n\t\tlet message = this.createNewMessage(author, text, replyToId, id);\n\n\t\tthis.allMessages[message.id] = message;\n\t\tthis.allMessages[replyToId].replies.push(message.id);\n\n\t\treturn message.id;\n\t}\n\n\tprivate ready: boolean = false;\n\tmarkReady() {\n\t\tthis.ready = true;\n\t}\n\n\tisReady() {\n\t\treturn this.ready;\n\t}\n}","import MessageComponent from './MessageComponent'\nimport React from 'react'\nimport RedditManager from './RedditManager';\nimport {ThreadDataManager} from './ThreadDataManager'\n\ninterface ThreadProps {\n\tsubmissionId: string,\n}\n\nexport default class Thread extends React.Component<ThreadProps> {\n\n\tdataManager: ThreadDataManager;\n\tredditManager: RedditManager;\n\tscrollRef: React.Ref<HTMLDivElement>;\n\n\tconstructor(props: ThreadProps) {\n\t\tsuper(props);\n\n\t\tthis.dataManager = new ThreadDataManager();\n\t\tthis.redditManager = new RedditManager(this.dataManager);\n\n\t\tthis.scrollRef = React.createRef();\n\t\t\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.redditManager.fetchPost(this.props.submissionId, () => {\n\t\t\tthis.dataManager.markReady();\n\t\t\tthis.forceUpdate();\n\t\t})\n\t}\n\n\tgetMessageComponents(): Array<React.ReactNode> {\n\t\tlet messageIds = this.dataManager.getRootMessageIds();\n\n\t\treturn messageIds.map((id) => <MessageComponent key={id} offsetHeight={0} messageId={id} dataManager={this.dataManager}/>)\n\t}\n\t\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{display: 'flex', flexDirection: 'column', width: '90%'}}>\n\t\t\t\t{this.dataManager.isReady() ? this.getMessageComponents() : null}\n\t\t\t</div>\n\t\t);\n\t}\n}","import { Button, TextInput } from 'evergreen-ui';\n\nimport React from 'react';\nimport Thread from './diamond-threads/Thread'\n\ninterface ThreadClientState {\n\tlastSubmissionId: string | null,\n}\n\nexport default class ThreadClient extends React.Component {\n\n\tstate: ThreadClientState = {\n\t\tlastSubmissionId: null,\n\t}\n\n\tenteredURL: string = '';\n\tsubmitURL() {\n\t\tlet commentsIndex = this.enteredURL.indexOf('/comments/');\n\t\tif (commentsIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlet submissionId = this.enteredURL.substr(commentsIndex + 10, 6);\n\t\tthis.setState({\n\t\t\tlastSubmissionId: submissionId,\n\t\t})\n\t}\n\n\trender(): React.ReactNode {\n\t\treturn (\n\t\t\t<div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n\t\t\t\t<div style={{alignSelf: 'stretch', height: 150, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n\t\t\t\t\t<div style={{display: 'flex', alignItems: 'center'}}>\n\t\t\t\t\t\t<TextInput \n\t\t\t\t\t\t\tplaceholder={\"Enter a reddit URL\"}\n\t\t\t\t\t\t\twidth={800}\n\t\t\t\t\t\t\theight={60}\n\n\t\t\t\t\t\t\tonChange={(e: any) => {\n\t\t\t\t\t\t\t\tthis.enteredURL = e.target.value;\n\t\t\t\t\t\t\t}}\n\t\n\t\t\t\t\t\t\tstyle={{marginRight: 20}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button appearance={'primary'} height={56} onClick={() => {this.submitURL()}}>Go</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.state.lastSubmissionId ? <Thread submissionId={this.state.lastSubmissionId} /> : null}\n\t\t\t</div>\n\t\t\t\n\t\t);\n\t}\n}","import React from 'react';\nimport ThreadClient from './ThreadClient';\n\nfunction App() {\n\n\treturn (\n\t\t<ThreadClient />\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}